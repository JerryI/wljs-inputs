Component[OptionsPattern[]] := With[{
    Event = OptionValue["Event"], 
    Topic = OptionValue["Topic"], 
    Uid = CreateUUID[], 
    Label = OptionValue["Label"], 
    MinX = OptionValue["Min"], 
    MaxX = OptionValue["Max"], 
    Step = OptionValue["Step"], 
    Initial = OptionValue["Initial"]
},
    {
        <div class="relative shrink-0 gap-y-3 pb-2 flex flex-col sm-controls">
            <div class="flex gap-x-5 sm-controls">
                <label for="default-range" class="block mb-2 text-sm font-medium text-gray-900"><Label/></label>
                <input id="n-{Uid}" type="number" class="ml-auto h-2 grow max-w-60 block p-2.5 text-xs text-gray-900 bg-gray-50 rounded-md border-2-gray-50 border border-gray-300 focus:ring-blue-500 focus:border-blue-500" min="{MinX}" max="{MaxX}" step="{Step}" value="{Initial}"></input>
            </div>
            <input id="r-{Uid}" type="range" min="{MinX}" max="{MaxX}" step="{Step}" value="{Initial}" class="sm-controls w-full h-1 bg-gray-200 rounded-lg appearance-none cursor-pointer "></input>
        </div>
    ,
    If[StringQ[Topic],
        <script type="module">
            const num = document.getElementById('n-<Uid/>');
            const ran = document.getElementById('r-<Uid/>');
            
            function isNumber(value) { return typeof value === 'number'}

            num.addEventListener('input', (event)=> {
                if (isNaN(num.value)) return;
                ran.value = num.value;
                server.kernel.emitt('<Event/>', num.value, '<Topic/>');      
            });

            ran.addEventListener('input', (event)=> {
                if (isNaN(ran.value)) return;
                num.value = ran.value;
                server.kernel.emitt('<Event/>', ran.value, '<Topic/>');      
            });
        </script>
    ,
            With[{InputTopic = Topic[[1]], ChangeTopic = Topic[[2]]},
                With[{
                    InputRangeScript = If[StringQ[InputTopic],
                        <Placebo>
                            num.addEventListener('input', (event)=> {
                                if (isNaN(num.value)) return;
                                ran.value = num.value;
                                server.kernel.emitt('<Event/>', num.value, '<InputTopic/>');      
                            });

                            ran.addEventListener('input', (event)=> {
                                if (isNaN(ran.value)) return;
                                num.value = ran.value;
                                server.kernel.emitt('<Event/>', ran.value, '<InputTopic/>');      
                            });        
                        </Placebo>
                    , ""],

                    ChangeRangeScript = If[StringQ[ChangeTopic],
                        <Placebo>
                            num.addEventListener('blur', (event)=> {
                                if (isNaN(num.value)) return;
                                ran.value = num.value;
                                server.kernel.emitt('<Event/>', num.value, '<ChangeTopic/>');      
                            });

                            ran.addEventListener('change', (event)=> {
                                if (isNaN(ran.value)) return;
                                num.value = ran.value;
                                server.kernel.emitt('<Event/>', ran.value, '<ChangeTopic/>');      
                            });        
                        </Placebo>                        
                    , ""]
                },
                    <script type="module">
                        const num = document.getElementById('n-<Uid/>');
                        const ran = document.getElementById('r-<Uid/>');

                        function isNumber(value) { return typeof value === 'number'};
                        <InputRangeScript/>;
                        <ChangeRangeScript/>;
                    </script>
                ]
            ]
    ]
    }
];

Options[Component] = {"Event"->"blackhole", "Label"->"", "Min"->0, "Max"->1, "Step"->1, "Initial"->0, "Topic"->"Default"};

Component

